import{_ as i,r as l,o,c as r,d as e,e as s,a as t,b as a}from"./app-D-TC3Ll_.js";const p="/sake-s-blog/assets/image-20230730180250937-GIzJUxW6.png",c="/sake-s-blog/assets/QQ%E6%88%AA%E5%9B%BE20230703222601-nq2axHlx.png",d="/sake-s-blog/assets/image-20230730155131420-BQF53L9m.png",u="/sake-s-blog/assets/image-20230730161034521-Dgc9X1Lj.png",m="/sake-s-blog/assets/image-20230730161344290-DkXwbn4Y.png",h="/sake-s-blog/assets/env-autoboot-xRGFsOTX.png",g={},b=e("strong",null,"前言",-1),v=e("code",null,"22.03.5",-1),k={href:"https://malossov.github.io/",target:"_blank",rel:"noopener noreferrer"},f=a('<p><img src="'+p+'" alt="image-20230730180250937"></p><h2 id="准备" tabindex="-1"><a class="header-anchor" href="#准备"><span><strong>准备</strong></span></a></h2><ul><li><code>XiaoMi Mi Router 4C</code>路由器</li><li>一根网线</li><li><code>Python</code>环境</li><li><code>Breed</code>：https://blog.hackpascal.net/</li><li>漏洞提权工具：https://github.com/acecilia/OpenWRTInvasion</li><li><code>OpenWrt</code>固件：https://downloads.openwrt.org/releases/22.03.5/targets/ramips/mt76x8/openwrt-22.03.5-ramips-mt76x8-xiaomi_mi-router-4c-squashfs-sysupgrade.bin</li></ul><p><img src="'+c+'" alt=""></p><h2 id="漏洞提权" tabindex="-1"><a class="header-anchor" href="#漏洞提权"><span><strong>漏洞提权</strong></span></a></h2>',5),x={href:"https://github.com/acecilia/OpenWRTInvasion",target:"_blank",rel:"noopener noreferrer"},_=a(`<li><p>使用Python安装目录下依赖：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">pip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>运行漏洞提权工具：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">python remote_command_execution_vulnerability.py</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>登录到路由器Web页面，复制链接输入到漏洞提权的工具。</p></li><li><p>提权完成后，通过ssh和ftp连接就可以控制路由器了。</p></li>`,4),y=a(`<h2 id="备份" tabindex="-1"><a class="header-anchor" href="#备份"><span><strong>备份</strong></span></a></h2><blockquote><p>进行下一步工作之前，我们需要将原厂的<code>bootloader</code>分区、<code>eeprom</code>分区备份，通过查阅<code>OpenWrt</code>的<code>Xiaomi-4C</code>的原厂闪存布局得知：</p><ul><li><code>mtd1 = bootloader</code></li><li><code>mtd3 = eeprom</code></li></ul></blockquote><h3 id="stock-proc-mtd" tabindex="-1"><a class="header-anchor" href="#stock-proc-mtd"><span><strong>Stock /proc/mtd</strong></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">dev:    size   erasesize  name</span>
<span class="line">mtd0: 01000000 00010000 &quot;ALL&quot;</span>
<span class="line">mtd1: 00020000 00010000 &quot;Bootloader&quot;</span>
<span class="line">mtd2: 00010000 00010000 &quot;Config&quot;</span>
<span class="line">mtd3: 00010000 00010000 &quot;Factory&quot;</span>
<span class="line">mtd4: 00010000 00010000 &quot;crash&quot;</span>
<span class="line">mtd5: 00010000 00010000 &quot;cfg_bak&quot;</span>
<span class="line">mtd6: 00100000 00010000 &quot;overlay&quot;</span>
<span class="line">mtd7: 00c60000 00010000 &quot;OS1&quot;</span>
<span class="line">mtd8: 00af0000 00010000 &quot;rootfs&quot;</span>
<span class="line">mtd9: 00200000 00010000 &quot;disk&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>以上信息可连接到路由器后，输入 <code>cat /proc/mtd</code>查看</li></ul><ol><li><p>将整个磁盘分区命名为all.bin备份到tmp路径：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/mtd0 <span class="token assign-left variable">of</span><span class="token operator">=</span>/tmp/all.bin</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>将Bootloader分区命名为bootloader.bin备份到tmp路径：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/mtd1 <span class="token assign-left variable">of</span><span class="token operator">=</span>/tmp/bootloader.bin</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>将Eeprom分区命名为eeprom.bin备份到tmp路径：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/mtd2 <span class="token assign-left variable">of</span><span class="token operator">=</span>/tmp/eeprom.bin</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>使用ftp备份到本地（备份前需确认大小是否正确）。</p></li></ol><h2 id="刷入breed" tabindex="-1"><a class="header-anchor" href="#刷入breed"><span><strong>刷入Breed</strong></span></a></h2><ol><li><p>将breed.bin文件复制到远端/tmp目录下。</p></li><li><p>通过ssh执行下列命令刷入Breed：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">mtd <span class="token function">write</span> /tmp/breed.bin Bootloader</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>刷入完成后，长按复位键复位路由器。</p></li><li><p>通过浏览器访问192.168.1.1进入breed。</p></li></ol><h2 id="刷入openwrt" tabindex="-1"><a class="header-anchor" href="#刷入openwrt"><span><strong>刷入OpenWrt</strong></span></a></h2><p>通过阅读OpenWrt的XiaoMi_mi_Router_4C的dts文件</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">/{your openwrt source location}/openwrt/target/linux/ramips/dts/mt7628an_xiaomi_mi-router-4c.dts</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们发现，<strong>firmwire分区的起始地址为<code>0x160000</code>，大小为<code>0xea0000</code>，即：内核(kernel)位于<code>0x160000</code>起始。</strong></p><p>然而，需要注意的是，我们使用的通用breed刷机工具<strong>并没有</strong>对其进行<strong>适配</strong>。如果你选择使用图形界面刷机方式，只能选择几个有限的位置，比如<code>0x60000</code>等。这就导致了一个问题：</p><p><strong>尽管<code>bootloader</code>能够在<code>0x60000</code>地址正确加载内核，但由于内核中嵌入了dtb文件，而dtb文件定义了文件系统的位置，如果你将<code>OpenWrt</code>刷入<code>0x60000</code>地址，由于整个文件向前移动了，导致文件系统也跟着向前移动。因此，dtb无法找到正确挂载文件系统的位置（标识为<code>magic:D0 0D FE ED</code>），导致整个系统启动过程失败并不断重启。</strong></p><hr><h3 id="openwrt-snapshot-proc-mtd" tabindex="-1"><a class="header-anchor" href="#openwrt-snapshot-proc-mtd"><span><strong>OpenWrt snapshot /proc/mtd</strong></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">dev:    size   erasesize  name</span>
<span class="line">mtd0: 00020000 00010000 &quot;bootloader&quot;</span>
<span class="line">mtd1: 00010000 00010000 &quot;config&quot;</span>
<span class="line">mtd2: 00010000 00010000 &quot;factory&quot;</span>
<span class="line">mtd3: 00010000 00010000 &quot;crash&quot;</span>
<span class="line">mtd4: 00010000 00010000 &quot;cfg_bak&quot;</span>
<span class="line">mtd5: 00100000 00010000 &quot;overlay&quot;</span>
<span class="line">mtd6: 00ea0000 00010000 &quot;firmware&quot;</span>
<span class="line">mtd7: 002052ab 00010000 &quot;kernel&quot;</span>
<span class="line">mtd8: 00c9ad55 00010000 &quot;rootfs&quot;</span>
<span class="line">mtd9: 00a10000 00010000 &quot;rootfs_data&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了解决这个问题，我们需要手动将<code>OpenWrt</code>刷入到<code>0x160000</code>起始的闪存位置上：</p><ol><li><p>使用Python开一个局域网的共享文件夹：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">python <span class="token parameter variable">-m</span> http.server <span class="token number">8000</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>使用telnet连接到Breed，再通过wget命令下载局域网的OpenWrt文件:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">wget</span> <span class="token punctuation">[</span><span class="token punctuation">..</span>./openwrt.bin<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="`+d+`" alt="image-20230730155131420"></p><blockquote><p>记住这里的两个信息：</p><ul><li>Length: {Length}</li><li>Saving to address {save addr}</li></ul></blockquote></li><li><p>运行命令擦除要写入的分区：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">flash erase <span class="token punctuation">{</span>start addr<span class="token punctuation">}</span> <span class="token punctuation">{</span>size<span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>这里以firmwire为例，起始地址0x160000，大小0xea0000</p></blockquote><p><img src="`+u+`" alt="image-20230730161034521"></p></li><li><p>运行命令刷入openwrt.bin文件：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">flash <span class="token function">write</span> <span class="token punctuation">{</span>start addr<span class="token punctuation">}</span> <span class="token punctuation">{</span>save adrr<span class="token punctuation">}</span> <span class="token punctuation">{</span>size<span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>这里以<code>firmwire</code>和<code>OpenWrt 22.03.5</code>为例，起始地址<code>0x160000</code>，存储地址为<code>0x80000000</code>，大小为<code>0x5c0139</code></p></blockquote><p><img src="`+m+`" alt="image-20230730161344290"></p></li><li><p>运行命令加载内核：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">boot flash 0x160000</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>现在就已经可以正常启动OpenWrt了</p></li><li><p>设置OpenWrt自启动：更改环境变量字段，实现自动执行命令加载内核 <img src="`+h+'" alt="env-autoboot"></p></li></ol><h2 id="后记" tabindex="-1"><a class="header-anchor" href="#后记"><span><strong>后记</strong></span></a></h2><blockquote><p>这个路由器系统启动的过程分为以下阶段：**引导加载程序（bootloader）启动并加载内核（kernel），内核运行并挂载文件系统，内核开始执行用户模式程序，内核将权限交给用户模式程序以继续系统执行。**如果直接采用通用Breed的图形界面进行刷机就会导致无限重启。</p></blockquote><hr>',22);function q(O,W){const n=l("ExternalLinkIcon");return o(),r("div",null,[e("blockquote",null,[e("p",null,[b,s("：最近不是毕业季嘛，捡垃圾捡了一个小米4C路由器，简单擦洗了一些污垢后直接上电，发现能用。搜了下参数很便宜，但是因为是白嫖的😋，还是准备刷个OpenWrt。目前刷入的是官方版本"),v,s("，在此感谢 "),e("a",k,[s("@MALossov"),t(n)]),s("巨巨(Orz)的帮助，总算是把这个路由器的坑踩完了🥰。")])]),f,e("ol",null,[e("li",null,[e("p",null,[s("将仓库"),e("a",x,[s("OpenWRTInvasion"),t(n)]),s("下载或clone到本地。")])]),_]),y])}const C=i(g,[["render",q],["__file","XiaoMi-4CshuaruOpenWrtcaikang.html.vue"]]),w=JSON.parse(`{"path":"/blogs/jishu/XiaoMi-4CshuaruOpenWrtcaikang.html","title":"XiaoMi 4C刷入OpenWrt踩坑","lang":"zh-CN","frontmatter":{"title":"XiaoMi 4C刷入OpenWrt踩坑","mathjax":true,"tags":["嵌入式","OpenWrt"],"categories":["技术"],"date":"2023/07/03","description":"前言：最近不是毕业季嘛，捡垃圾捡了一个小米4C路由器，简单擦洗了一些污垢后直接上电，发现能用。搜了下参数很便宜，但是因为是白嫖的😋，还是准备刷个OpenWrt。目前刷入的是官方版本22.03.5，在此感谢 @MALossov巨巨(Orz)的帮助，总算是把这个路由器的坑踩完了🥰。 image-20230730180250937 准备 XiaoMi M...","head":[["meta",{"property":"og:url","content":"https://sakee.cn/sake-s-blog/blogs/%E6%8A%80%E6%9C%AF/XiaoMi-4C%E5%88%B7%E5%85%A5OpenWrt%E8%B8%A9%E5%9D%91.html"}],["meta",{"property":"og:site_name","content":"sake's blog"}],["meta",{"property":"og:title","content":"XiaoMi 4C刷入OpenWrt踩坑"}],["meta",{"property":"og:description","content":"前言：最近不是毕业季嘛，捡垃圾捡了一个小米4C路由器，简单擦洗了一些污垢后直接上电，发现能用。搜了下参数很便宜，但是因为是白嫖的😋，还是准备刷个OpenWrt。目前刷入的是官方版本22.03.5，在此感谢 @MALossov巨巨(Orz)的帮助，总算是把这个路由器的坑踩完了🥰。 image-20230730180250937 准备 XiaoMi M..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-10T20:00:17.000Z"}],["meta",{"property":"article:author","content":"fullstacksake"}],["meta",{"property":"article:tag","content":"嵌入式"}],["meta",{"property":"article:tag","content":"OpenWrt"}],["meta",{"property":"article:published_time","content":"2023-07-02T16:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-10T20:00:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"XiaoMi 4C刷入OpenWrt踩坑\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-02T16:00:00.000Z\\",\\"dateModified\\":\\"2024-08-10T20:00:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"fullstacksake\\",\\"email\\":\\"fullstacksake@outlook.com\\"}]}"],["meta",{"property":"og:url","content":"https://sakee.cn/sake-s-blog/blogs/jishu/XiaoMi-4CshuaruOpenWrtcaikang.html"}],["meta",{"property":"og:site_name","content":"sake's blog"}],["meta",{"property":"og:title","content":"XiaoMi 4C刷入OpenWrt踩坑"}],["meta",{"property":"og:description","content":"前言：最近不是毕业季嘛，捡垃圾捡了一个小米4C路由器，简单擦洗了一些污垢后直接上电，发现能用。搜了下参数很便宜，但是因为是白嫖的😋，还是准备刷个OpenWrt。目前刷入的是官方版本22.03.5，在此感谢 @MALossov巨巨(Orz)的帮助，总算是把这个路由器的坑踩完了🥰。 image-20230730180250937 准备 XiaoMi M..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-10T20:00:17.000Z"}],["meta",{"property":"article:author","content":"fullstacksake"}],["meta",{"property":"article:tag","content":"嵌入式"}],["meta",{"property":"article:tag","content":"OpenWrt"}],["meta",{"property":"article:published_time","content":"2023-07-02T16:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-10T20:00:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"XiaoMi 4C刷入OpenWrt踩坑\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-02T16:00:00.000Z\\",\\"dateModified\\":\\"2024-08-10T20:00:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"fullstacksake\\",\\"email\\":\\"fullstacksake@outlook.com\\"}]}"]]},"headers":[{"level":2,"title":"准备","slug":"准备","link":"#准备","children":[]},{"level":2,"title":"漏洞提权","slug":"漏洞提权","link":"#漏洞提权","children":[]},{"level":2,"title":"备份","slug":"备份","link":"#备份","children":[{"level":3,"title":"Stock /proc/mtd","slug":"stock-proc-mtd","link":"#stock-proc-mtd","children":[]}]},{"level":2,"title":"刷入Breed","slug":"刷入breed","link":"#刷入breed","children":[]},{"level":2,"title":"刷入OpenWrt","slug":"刷入openwrt","link":"#刷入openwrt","children":[{"level":3,"title":"OpenWrt snapshot /proc/mtd","slug":"openwrt-snapshot-proc-mtd","link":"#openwrt-snapshot-proc-mtd","children":[]}]},{"level":2,"title":"后记","slug":"后记","link":"#后记","children":[]}],"git":{"createdTime":1723320017000,"updatedTime":1723320017000,"contributors":[{"name":"fullstacksake@gmail.com","email":"64351788+fullstack-sake@users.noreply.github.com","commits":1}]},"filePathRelative":"blogs/技术/XiaoMi-4C刷入OpenWrt踩坑.md"}`);export{C as comp,w as data};
